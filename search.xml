<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ds-note-2-ContainerWithMostWater</title>
    <url>/2020/02/17/ds-note-2-ContainerWithMostWater/</url>
    <content><![CDATA[<p>Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>
<p>Note: You may not slant the container and n is at least 2.</p>
<img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg"  height="200" width="500">

<p>The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.</p>
<p>Example:</p>
<blockquote>
<p>Input: [1,8,6,2,5,4,8,3,7]<br>Output: 49</p>
</blockquote>
<a id="more"></a>
<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>Use dual pointer can work out it within once traversal.  Define a variable used to store the recent largest volume. In the beginning, the left pointer is located at 0, another is at the end of array. We know the volume of the whole container is based on the shortest edge, so <strong>volume = min( height[i], height[j] ) * ( j - i )</strong>, we compare  this volume with the one we store, if it is larger than the previous one, we use it as the largest volume to the next comparsion. But how should we control the term of pointer’s move? If  <strong>height[i] &lt; height[j]</strong>, we can get that, on the right of the left pointer, there may be a larger new  <strong>height[i]</strong> can instead of this one, which is stand for the largest volume. But on the left of the right pointer, it is no way. So we can move the left pointer to the next position at ease, because if we need to replace the stored value, it must be larger in this way. For the right pointer, it’s in the same way. When <strong>i  &gt;=  j</strong>, we consider that the traversal can be shut down, in the previous procedure, value of the largest volume is larger and larger until it is the right answer.</p>
<p>By using dual pointer flexibly can skip many needless comparsion in the traversal, and enhance the efficient.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxvolume = <span class="number">0</span>, i = <span class="number">0</span>, j = height.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            maxvolume = Math.max(maxvolume, Math.min(height[i], height[j]) * (j - i));</span><br><span class="line">            <span class="keyword">if</span> (height[i] &lt; height[j]) i++;</span><br><span class="line">            <span class="keyword">else</span> j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxvolume;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>datastructure</tag>
      </tags>
  </entry>
  <entry>
    <title>ds-notes-1-TwoSum</title>
    <url>/2020/02/17/ds-notes-1-TwoSum/</url>
    <content><![CDATA[<p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.</p>
<p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p>
<p>Example:</p>
<blockquote>
<p>Given nums = [2, 7, 11, 15], target = 9,</p>
<p>Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].</p>
</blockquote>
<a id="more"></a>

<h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>I was going to work out this problem by violence solution that using dual loop to achieve traversal, and easy to return the indices what we want. But it’s obviously not a efficient method, I think there is a method may get to o(n). </p>
<p>Use the HashMap in java, in this way, within only the once traversal in original array, after visiting each element by subscript, to compare if existing a key in the HashMap which equals to <strong>target - nums[i]</strong> , if no, then put the element’s value as key, and its index as value into the HashMap, if yes, we can get that recently <strong>nums[i]</strong> add the key in HashMap equals to the <strong>target</strong>. So, what we want is just the value in HashMap searched by the key <strong>target - nums[i]</strong>, and the <strong>i</strong> recent value.</p>
<p>This problem show that it is nice to use HashMap to make it efficient in such situation, we need to visit the index by value in a array. The key in HashMap can store any type element, then the value can store the original indices, visiting the value by key just need the time complexity of constant order.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; map.get(target - nums[i]), i &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No two sum solution"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>datastructure</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现flybird小游戏</title>
    <url>/2020/02/16/python%E5%AE%9E%E7%8E%B0flybird%E5%B0%8F%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>前段时间了解到python里pygame这个库，突发奇想用python来做一些有趣的小东西，随即就想到了读初中时候那个火了好一阵子失传已久的小游戏–flybird。 游戏逻辑很简单，可以用来体验一下pygame这个强大的将游戏开发专注于游戏逻辑本身的模块。</p>
<a id="more"></a>

<h1 id="整个小游戏的生命周期"><a href="#整个小游戏的生命周期" class="headerlink" title="整个小游戏的生命周期"></a>整个小游戏的生命周期</h1><h2 id="小游戏预览图"><a href="#小游戏预览图" class="headerlink" title="小游戏预览图"></a>小游戏预览图</h2><img src="http://r.photo.store.qq.com/psc?/V13qphfI0VLybb/Tiy10*PRF5enyWrLfdcKz7zngK3mwAwC0QJKJWEivDFeWFiyJEKTR.lJTyxSCor3aTZXVkTHaGQXTCxmtG378yt7VyhAP7JxXu7GJWpHyNA!/r"  height="600" width="600">
<img src="http://r.photo.store.qq.com/psc?/V13qphfI0VLybb/Tiy10*PRF5enyWrLfdcKz4cMaHyup.PIxibBAJ7Xl4hZ5tCM9wvt6DyDpoGshGzYTOVgbhon6y5N2dvuum*iZGjsy8ejkuzRBqdsQEODwBI!/r"  height="600" width="600">
<img src="http://m.qpic.cn/psc?/V13qphfI0VLybb/Tiy10*PRF5enyWrLfdcKz0pOcEt8Ong5.lBrWW9v682G.zVkN1hRzgCKDHpi2GrppO4XDJ4hqF31KJ4xBDimLArgZ37A5F.Nuhv4iaZZuc4!/b&bo=8AIPA*ACDwMDCSw!&rf=viewer_4"  height="600" width="600">

<h2 id="pygame的使用"><a href="#pygame的使用" class="headerlink" title="pygame的使用"></a>pygame的使用</h2><p>下载好pygame之后打开pycharm，导入pygame模块，sys中要用到游戏的退出函数：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame,sys</span><br></pre></td></tr></table></figure>
<p>初始化主窗口：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">size = width, height = <span class="number">600</span>,<span class="number">600</span>    <span class="comment">#窗口大小</span></span><br><span class="line">screen = pygame.display.set_mode(size)</span><br><span class="line">pygame.display.set_caption(<span class="string">"flybird"</span>)</span><br></pre></td></tr></table></figure>

<h2 id="游戏机制"><a href="#游戏机制" class="headerlink" title="游戏机制"></a>游戏机制</h2><p>设计机制是游戏处于一个循环体内，不断刷新窗口内的像素位置，形成动画。以下循环展示了进入游戏的初始界面，首先是第一个<strong>for</strong>循环内的<strong>pygame.event.get()</strong>，所有的监听器处于这个消息队列中，每次循环都对其进行一次遍历。在我们的游戏中一个是要监听游戏关闭事件<strong>pygame.QUIT</strong>，另一个就是鼠标点击事件<strong>pygame.MOUSEBUTTONDOWN</strong>，通过返回鼠标的点击位置来判断是否开始游戏，或是对游戏内小鸟的控制。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">    <span class="keyword">if</span> event.type == pygame.QUIT:</span><br><span class="line">        exit()          <span class="comment">#游戏的退出</span></span><br><span class="line">    <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">        <span class="keyword">if</span> pygame.mouse.get_pressed()[<span class="number">0</span>]:</span><br><span class="line">            loc = pygame.mouse.get_pos()</span><br><span class="line">            <span class="keyword">if</span> (loc[<span class="number">0</span>] &gt; width / <span class="number">2</span> <span class="number">-90</span>) <span class="keyword">and</span> (loc[<span class="number">0</span>] &lt; width / <span class="number">2</span> +<span class="number">90</span>) <span class="keyword">and</span> (loc[<span class="number">1</span>] &gt; height / <span class="number">2</span> <span class="number">-80</span>) <span class="keyword">and</span> (loc [<span class="number">1</span>] &lt; height / <span class="number">2</span> +<span class="number">80</span>):</span><br><span class="line">                start_fly(screen <span class="comment">#进入start_fly表示进入开始游戏之后的循环体</span></span><br></pre></td></tr></table></figure>

<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p>这个项目没有使用任何的图片素材，因此游戏画面内所有的元素由<strong>pygame.draw</strong>模块绘制完成，并且为了达到这种像素风，仅仅使用了<strong>pygame.draw.rect</strong>来完成基本矩形的绘制。以下谈到的像素均为自己定义的像素，而非实际像素。</p>
<h2 id="需要用到的类"><a href="#需要用到的类" class="headerlink" title="需要用到的类"></a>需要用到的类</h2><p>游戏画面采取的是笛卡尔坐标系，以窗口左上角为坐标原点，x轴正方向往屏幕右侧，y轴正方向往屏幕下侧。</p>
<ul>
<li><strong>class Pixel:</strong><br> 像素类，用来对定义的像素点做基本的绘制，移动操作。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pixel</span>:</span></span><br><span class="line">    <span class="string">"""游戏内容均为像素点,实质上为固定大小的矩形"""</span></span><br><span class="line">    scale = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    location = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    color = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="comment">#构造方法 需要的参数有像素的长宽，起始位置，颜色，均由元组表示。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, scale , location, color)</span>:</span></span><br><span class="line">        self.scale = scale</span><br><span class="line">        self.location = location</span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self,target)</span>:</span></span><br><span class="line">        self.location = target</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ncolor</span><span class="params">(self,color)</span>:</span></span><br><span class="line">        self.color = color</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self,screen)</span>:</span></span><br><span class="line">        pygame.draw.rect(screen,self.color,(self.location,self.scale))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>class element：</strong><br>这个类通过使用<strong>class Pixel:</strong>的实例化对象来绘制获得游戏内容。通过改变成员变量 <strong>shift[ x, y]</strong> 的值来控制图像外接矩形左上角的坐标，改变 <strong>speed[ x, y]</strong> 来控制图像在x轴及y轴上的平移速度。而该类提供了 <strong>move(location)</strong> 和 <strong>setSpeed(speed)</strong> 两个成员方法来改变上述两个量。图片的绘制信息位于 <strong>build_BIRD，build_CLOUD ，build_SWITCH ，build_OBSTACLE， LETTER</strong>几个变量中。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pixel <span class="keyword">import</span> Pixel</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Element</span>:</span></span><br><span class="line">    pixelScale = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="comment">#此处的长宽代表像素点的个数</span></span><br><span class="line">    scale = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    mes = []</span><br><span class="line">    shifting = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    speed = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="comment">#构造方法，传入欲绘制图像的像素点长宽（元组），整个图像外接矩形的长宽（元组），图片的绘制信息格式为((x,y),color)，以此类元组形成的列表传入构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,pixelScale,scale,mes)</span>:</span></span><br><span class="line">        self.pixelScale = pixelScale</span><br><span class="line">        self.scale = scale</span><br><span class="line">        self.mes = mes</span><br><span class="line"><span class="comment">#将图像绘制到指定的surface对象上</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(self,screen)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(self.mes)):</span><br><span class="line">            location = [(self.mes[_][<span class="number">0</span>][<span class="number">0</span>]<span class="number">-1</span>) * self.pixelScale[<span class="number">0</span>] + self.shifting[<span class="number">0</span>], (self.mes[_][<span class="number">0</span>][<span class="number">1</span>]) * self.pixelScale[<span class="number">1</span>] + self.shifting[<span class="number">1</span>]]</span><br><span class="line">            color = self.mes[_][<span class="number">1</span>]</span><br><span class="line">            pixel = Pixel(self.pixelScale,location,color)</span><br><span class="line">            pixel.draw(screen)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">move</span><span class="params">(self,location)</span>:</span></span><br><span class="line">        self.shifting = location</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setSpeed</span><span class="params">(self,speed)</span>:</span></span><br><span class="line">        self.speed = speed</span><br></pre></td></tr></table></figure>

<h2 id="对象的构造"><a href="#对象的构造" class="headerlink" title="对象的构造"></a>对象的构造</h2><ul>
<li><strong>开始按钮</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">switch = Element((<span class="number">10</span>, <span class="number">10</span>),(<span class="number">13</span>, <span class="number">18</span>), build_SWITCH)</span><br><span class="line">switch.move((width / <span class="number">2</span> - <span class="number">90</span>,height / <span class="number">2</span> - <span class="number">80</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>小鸟</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 鸟</span></span><br><span class="line">bird = Element((<span class="number">3</span>, <span class="number">3</span>), (<span class="number">11</span>, <span class="number">17</span>), build_BIRD)</span><br><span class="line">bird.move((size[<span class="number">0</span>] / <span class="number">2</span> - <span class="number">60</span>, size[<span class="number">1</span>] / <span class="number">4</span>))</span><br><span class="line">bird.draw(screen)</span><br><span class="line">bird.speed = [<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>云</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cloud_1 = Element((<span class="number">5</span>, <span class="number">5</span>), (<span class="number">15</span>, <span class="number">19</span>), build_CLOUD)</span><br><span class="line">cloud_1.move((size[<span class="number">0</span>] / <span class="number">6</span>, size[<span class="number">1</span>] / <span class="number">5</span>))</span><br><span class="line">cloud_1.setSpeed((<span class="number">-0.7</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">cloud_2 = Element((<span class="number">7</span>, <span class="number">7</span>), (<span class="number">15</span>, <span class="number">19</span>), build_CLOUD)</span><br><span class="line">cloud_2.move((size[<span class="number">0</span>] / <span class="number">1.2</span>, size[<span class="number">1</span>] / <span class="number">3</span>))</span><br><span class="line">cloud_2.setSpeed((<span class="number">-1.5</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">cloud_3 = Element((<span class="number">10</span>, <span class="number">10</span>), (<span class="number">15</span>, <span class="number">19</span>), build_CLOUD)</span><br><span class="line">cloud_3.move((size[<span class="number">0</span>] / <span class="number">2</span>, size[<span class="number">1</span>] / <span class="number">1.5</span>))</span><br><span class="line">cloud_3.setSpeed((<span class="number">-2</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>障碍物</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">obstacle_1_1 = Element((<span class="number">5</span>, <span class="number">5</span>), (<span class="number">75</span>, <span class="number">21</span>), build_OBSTACLE)</span><br><span class="line">obstacle_1_1.move((size[<span class="number">0</span>], -size[<span class="number">1</span>] / <span class="number">3.5</span>))</span><br><span class="line">obstacle_1_2 = Element((<span class="number">5</span>, <span class="number">5</span>), (<span class="number">75</span>, <span class="number">21</span>), build_OBSTACLE)</span><br><span class="line">obstacle_1_2.move((size[<span class="number">0</span>], <span class="number">1.3</span>*size[<span class="number">1</span>] - obstacle_1_2.scale[<span class="number">0</span>]*obstacle_1_2.pixelScale[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">obstacle_2_1 = Element((<span class="number">5</span>, <span class="number">5</span>), (<span class="number">75</span>, <span class="number">21</span>), build_OBSTACLE)</span><br><span class="line">obstacle_2_1.move((size[<span class="number">0</span>] *<span class="number">1.4</span> , -size[<span class="number">1</span>] / <span class="number">3.5</span>))</span><br><span class="line">obstacle_2_2 = Element((<span class="number">5</span>, <span class="number">5</span>), (<span class="number">75</span>, <span class="number">21</span>), build_OBSTACLE)</span><br><span class="line">obstacle_2_2.move((size[<span class="number">0</span>] *<span class="number">1.4</span>, <span class="number">1.3</span>*size[<span class="number">1</span>] - obstacle_2_2.scale[<span class="number">0</span>]*obstacle_2_2.pixelScale[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">obstacle_3_1 = Element((<span class="number">5</span>, <span class="number">5</span>), (<span class="number">75</span>, <span class="number">21</span>), build_OBSTACLE)</span><br><span class="line">obstacle_3_1.move((size[<span class="number">0</span>] *<span class="number">1.7</span> , -size[<span class="number">1</span>] / <span class="number">3.5</span>))</span><br><span class="line">obstacle_3_2 = Element((<span class="number">5</span>, <span class="number">5</span>), (<span class="number">75</span>, <span class="number">21</span>), build_OBSTACLE)</span><br><span class="line">obstacle_3_2.move((size[<span class="number">0</span>] *<span class="number">1.7</span>, <span class="number">1.3</span>*size[<span class="number">1</span>] - obstacle_3_2.scale[<span class="number">0</span>]*obstacle_3_2.pixelScale[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>分数</strong></li>
</ul>
<p><strong>score</strong> 用来存储当前分数，游戏结束的时候返回游戏分数这个参数至主界面并显示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#每过一个障碍物加一分，显示分数</span></span><br><span class="line">        score_ten = Element( (<span class="number">10</span>,<span class="number">10</span>),(<span class="number">5</span>,<span class="number">5</span>), LETTER[ int (score / <span class="number">10</span>) ] )</span><br><span class="line">        score_one = Element( (<span class="number">10</span>,<span class="number">10</span>),(<span class="number">5</span>,<span class="number">5</span>), LETTER[ score % <span class="number">10</span>] )</span><br><span class="line">        score_ten.move((<span class="number">10</span>,<span class="number">0</span>))</span><br><span class="line">        score_one.move((<span class="number">60</span>,<span class="number">0</span>))</span><br><span class="line">        score_ten.draw(screen)</span><br><span class="line">        score_one.draw(screen)</span><br></pre></td></tr></table></figure>

<h1 id="游戏元素的动画"><a href="#游戏元素的动画" class="headerlink" title="游戏元素的动画"></a>游戏元素的动画</h1><p>所有的游戏动画均为平移，因此使用 <strong>class Element:</strong> 里的 <strong>move(location)</strong> 和 <strong>setSpeed(speed)</strong> 足以完成所有的动画效果。小鸟处于确定x坐标的竖直区域运动，云和障碍物不断的左移即可。</p>
<h2 id="开始游戏"><a href="#开始游戏" class="headerlink" title="开始游戏"></a>开始游戏</h2><p>在遍历消息队列中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> pygame.mouse.get_pressed()[<span class="number">0</span>]:</span><br><span class="line">	loc = pygame.mouse.get_pos()</span><br><span class="line">                 <span class="comment">#开始新游戏</span></span><br><span class="line">       <span class="keyword">if</span> (loc[<span class="number">0</span>] &gt; width / <span class="number">2</span> - <span class="number">90</span>) <span class="keyword">and</span> (loc[<span class="number">0</span>] &lt; width / <span class="number">2</span> + <span class="number">90</span>) <span class="keyword">and</span> (loc[<span class="number">1</span>] &gt; height / <span class="number">2</span> - <span class="number">80</span>) <span class="keyword">and</span> (loc[<span class="number">1</span>] &lt; height / <span class="number">2</span> + <span class="number">80</span>):</span><br><span class="line">       	score = start_fly(screen)</span><br></pre></td></tr></table></figure>

<h2 id="云的左移"><a href="#云的左移" class="headerlink" title="云的左移"></a>云的左移</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cloud_animation</span><span class="params">(cloud)</span>:</span></span><br><span class="line"><span class="comment">#若云的整体位置已越过窗口左侧，设置云的外接矩形左上角位于窗口最右侧。</span></span><br><span class="line">    <span class="keyword">if</span> cloud.shifting[<span class="number">0</span>] &lt; - (cloud.scale[<span class="number">1</span>] * cloud.pixelScale[<span class="number">1</span>]):</span><br><span class="line">        cloud.move((size[<span class="number">0</span>], cloud.shifting[<span class="number">1</span>]))</span><br><span class="line">    cloud.move(( cloud.shifting[<span class="number">0</span>] + cloud.speed[<span class="number">0</span>], cloud.shifting[<span class="number">1</span>] ))</span><br><span class="line">    cloud.draw(screen)</span><br></pre></td></tr></table></figure>
<h2 id="小鸟的向下匀加速直线运动"><a href="#小鸟的向下匀加速直线运动" class="headerlink" title="小鸟的向下匀加速直线运动"></a>小鸟的向下匀加速直线运动</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bird.move((bird.shifting[<span class="number">0</span>], bird.shifting[<span class="number">1</span>] + bird.speed[<span class="number">1</span>]))</span><br><span class="line">bird.speed[<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">bird.draw(screen)</span><br></pre></td></tr></table></figure>
<h2 id="监听鼠标右键点击事件对小鸟提供极大的瞬时向上的加速度，达到缓冲小鸟下落的效果"><a href="#监听鼠标右键点击事件对小鸟提供极大的瞬时向上的加速度，达到缓冲小鸟下落的效果" class="headerlink" title="监听鼠标右键点击事件对小鸟提供极大的瞬时向上的加速度，达到缓冲小鸟下落的效果"></a>监听鼠标右键点击事件对小鸟提供极大的瞬时向上的加速度，达到缓冲小鸟下落的效果</h2><p>在遍历消息队列中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">elif</span> event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">        mouse = pygame.mouse.get_pressed()</span><br><span class="line">        <span class="keyword">if</span> mouse[<span class="number">2</span>]:</span><br><span class="line">bird.speed[<span class="number">1</span>] -= <span class="number">25</span></span><br></pre></td></tr></table></figure>
<h2 id="障碍物的移动以及判断小鸟是否与障碍物相撞"><a href="#障碍物的移动以及判断小鸟是否与障碍物相撞" class="headerlink" title="障碍物的移动以及判断小鸟是否与障碍物相撞"></a>障碍物的移动以及判断小鸟是否与障碍物相撞</h2><p>（由于一开始游戏难度过大， 我将障碍物设置为空心，即小鸟不会和障碍物的正下方或正上方相撞，但会和障碍物的侧边相撞）<br>通过传入一定范围内的随机参数ran控制障碍物从最右端开始向左平移的初始位置。在每个障碍物对象经过小鸟的位置令分数+1，便可完成分数的记录。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">obstacle_animation</span><span class="params">(obstacle,ran,bird_height)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> obstacle.shifting[<span class="number">0</span>] &lt; - (obstacle.scale[<span class="number">1</span>] * obstacle.pixelScale[<span class="number">1</span>]):</span><br><span class="line">        obstacle.move((size[<span class="number">0</span>], obstacle.shifting[<span class="number">1</span>] + ran * (obstacle.scale[<span class="number">1</span>] * obstacle.pixelScale[<span class="number">1</span>]) ))</span><br><span class="line">    obstacle.move(( obstacle.shifting[<span class="number">0</span>] - <span class="number">1</span>, obstacle.shifting[<span class="number">1</span>] ))</span><br><span class="line">    obstacle.draw(screen)</span><br><span class="line">    <span class="keyword">if</span> (obstacle.shifting[<span class="number">0</span>] &lt; size[<span class="number">0</span>] / <span class="number">2</span>) <span class="keyword">and</span> (obstacle.shifting[<span class="number">0</span>] &gt; size[<span class="number">0</span>] / <span class="number">2</span> - <span class="number">60</span>):   <span class="comment">#可能发生碰撞的矩形区域</span></span><br><span class="line">        <span class="keyword">if</span> obstacle.shifting[<span class="number">1</span>] &lt; <span class="number">0</span>:  <span class="comment">#和上管道相撞的区域</span></span><br><span class="line">            <span class="keyword">if</span> obstacle.shifting[<span class="number">1</span>] + <span class="number">375</span> &gt;= bird_height: <span class="comment">#和上管道右侧相撞的区域</span></span><br><span class="line">                <span class="keyword">if</span> obstacle.shifting[<span class="number">0</span>] &lt; size[<span class="number">0</span>] / <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> obstacle.shifting[<span class="number">0</span>] &lt; size[<span class="number">0</span>] / <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">if</span> obstacle.shifting[<span class="number">1</span>] + <span class="number">375</span> &gt;=bird_height:</span><br><span class="line">                    <span class="keyword">return</span>  <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> obstacle.shifting[<span class="number">1</span>] &lt; bird_height:</span><br><span class="line">            <span class="keyword">if</span> obstacle.shifting[<span class="number">0</span>] &lt; size[<span class="number">0</span>] / <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">elif</span> obstacle.shifting[<span class="number">0</span>] &lt; size[<span class="number">0</span>] / <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> obstacle.shifting[<span class="number">1</span>] &lt; bird_height:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h1 id="小游戏的打包"><a href="#小游戏的打包" class="headerlink" title="小游戏的打包"></a>小游戏的打包</h1><p>(已安装<strong>pyinstaller</strong>)<br>在命令行窗口，进入到游戏入口文件的路径下输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyinstaller -w -F 文件名.py 文件名.py...</span><br></pre></td></tr></table></figure>
<p>打包完成之后可执行文件处于<strong>dist</strong>目录下。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>pygame确实十分的方便，功能其实远不止这个小游戏所用到的这些，而我的这种自己建类绘制图形其实没有什么必要，直接导入图片资源，pygame就能够构造以这个图片资源为基础的surface对象，并提供了许多方法来操作，远比上述自己创造的类方法要灵活，最主要的是，在设计2D游戏的过程中，完全不需要花大量时间在游戏框架的构造上，一个小游戏一天便可开发完成。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
